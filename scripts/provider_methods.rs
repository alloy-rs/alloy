#!/usr/bin/env -S cargo +nightly -Zscript
---
[package]
edition = "2021"

[dependencies]
syn = { version = "2.0", features = ["full"] }
quote = "1.0"
---

/*
Usage: scripts/provider_methods.rs crates/provider/src/provider/trait.rs > crates/provider/src/provider/delegate/generated.rs

Builds the `all_methods!` macro from the definition of the `Provider` trait.
*/

use std::fmt::Write;

fn main() {
    let path = std::env::args().nth(1).expect("missing path");
    let src = std::fs::read_to_string(&path).expect("failed to read file");
    let file = syn::parse_file(&src).expect("failed to parse file");
    let tr = file
        .items
        .iter()
        .find_map(|item| match item {
            syn::Item::Trait(tr) if tr.ident == "Provider" => Some(tr),
            _ => None,
        })
        .expect("missing Provider trait");
    let mut all_methods = String::new();
    for item in &tr.items {
        let syn::TraitItem::Fn(f) = item else {
            continue;
        };
        let name = &f.sig.ident;
        if name == "multicall" {
            eprintln!("skipping {name}: return type contains `Self`");
            continue;
        }
        if f.sig.receiver().is_none_or(|r| r.reference.is_none() || r.mutability.is_some()) {
            eprintln!("skipping {name}: must have a &self receiver");
            continue;
        }

        let asyncness = if f.sig.asyncness.is_some() { "async" } else { "" };
        let generics = if f.sig.generics.params.is_empty() { "" } else { &format!("<{}>", tokens_to_string(&f.sig.generics.params)) };
        let args = tokens_to_string(&f.sig.inputs);
        let ret = match &f.sig.output {
            syn::ReturnType::Default => "()",
            syn::ReturnType::Type(_, ty) => &tokens_to_string(&ty).to_string(),
        };
        let where_ = tokens_to_string(&f.sig.generics.where_clause);
        let _ = writeln!(all_methods, "[{asyncness}] fn {name}[{generics}]({args}) -> {ret} [{where_}];");
    }

    println!("\
// @generated by scripts/provider_methods.rs. Do not modify by hand.
#[macro_export]
#[doc(hidden)]
macro_rules! _pd_all_methods {{
    ([$($extra:tt)*] $m:path) => {{
        $m!([$($extra)*]

{all_methods}

        );
    }};
}}");
}

fn tokens_to_string<T: quote::ToTokens>(x: &T) -> impl std::fmt::Display {
    x.to_token_stream()
}
